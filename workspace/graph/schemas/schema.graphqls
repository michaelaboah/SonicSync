# GraphQL schema example
#
# https://gqlgen.com/getting-started/

directive @oneOf on INPUT_OBJECT

# scalar ObjectID

type User {
  id: ID!
  name: String!
  email: String!
}

input UserInput {
  name: String!
  email: String!
}

type Query {
  users: [User!]!
  items: [Item!]!
  find_by_model(model_name: String!): Item!
  find_by_id(id: ID!): Item!
  fuzzy_by_model(model_name: String!): [Item]!
}


type Mutation {
  createUser(input: UserInput!): User!
  createItem(input: ItemInput!, details: CategoryDetailsInput): Item!
}


input ItemInput {
  model: String!
  weight: Float!
  manufacturer: String! 
  category: Category! = GENERIC
  notes: String
  dimensions: DimensionInput
  keywords: [String!]
  pdf_blob: String
}


input CategoryDetailsInput @oneOf {
  amplifier_input: AmplifierInput
  console_input: ConsoleInput
  computer_input: ComputerInput 
  microphone_input: MicrophoneInput
  processor_input: ProcessorInput
  stagebox_input: StageBoxInput
  monitoring_input: MonitoringInput
  speaker_input: SpeakerInput
  tx_input: TxInput 
  rx_input: RxInput 
}

union CategoryDetails = Console | Computer | Microphone | StageBox | Processor | Monitoring | Amplifier | Speaker | Tx | Rx 

type Item {
  created_at: String!
  updated_at: String!
  model: String!
  weight: Float!
  manufacturer: String! 
  category: Category!
  details: CategoryDetails 
  notes: String
  keywords: [String!]
  dimensions: Dimension
  pdf_blob: String
}


type Error {
  field: String!
  message: String!
}
