package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.35

import (
	"context"
	"fmt"
	"log"
	"time"

	"go.mongodb.org/mongo-driver/bson"
	"go.mongodb.org/mongo-driver/mongo"

	pkgDB "github.com/michaelaboah/sonic-sync-cloud/database"
	"github.com/michaelaboah/sonic-sync-cloud/graph/model"
)

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input model.UserInput) (*model.User, error) {
	users := r.DB.Database(pkgDB.ClientsDB).Collection(pkgDB.UserCol)

	user := &model.User{
		ID:    "0",
		Name:  input.Name,
		Email: input.Email,
	}

	users.InsertOne(ctx, user)
	return user, nil
}

// CreateItem is the resolver for the createItem field.
func (r *mutationResolver) CreateItem(ctx context.Context, input model.ItemInput, details *model.CategoryDetailsInput) (*model.Item, error) {
	var (
		detailsBytes []byte
		err          error
	)

	switch input.Category {

	case model.CategoryConsole:
		detailsBytes, err = bson.Marshal(details.ConsoleInput)
		break

	case model.CategoryAmplifier:
		panic("Unimplmented")
		// detailsBytes, err = bson.Marshal(details.)

		// break

	case model.CategoryMicrophones:
		detailsBytes, err = bson.Marshal(details.MicrophoneInput)
		break

	}

	if err != nil {
		fmt.Println(err)
		log.Println(err)
	}

	deets, err := model.MatchDetails(input.Category, detailsBytes)
	if err != nil {
		fmt.Println("Matching error: ", err)
		log.Println("Matching error: ", err)
	}

	items := r.DB.Database(pkgDB.EquipDB).Collection(pkgDB.ItemsCol)
	item := &model.Item{
		CreatedAt:    time.Now().String(),
		UpdatedAt:    time.Now().String(),
		Cost:         input.Cost,
		Model:        input.Model,
		Weight:       input.Weight,
		Manufacturer: input.Manufacturer,
		Category:     input.Category,
		Details:      deets,
		Notes:        &input.Model,
		Dimensions:   (*model.Dimension)(input.Dimensions),
		PDFBlob:      input.PDFBlob,
	}

	_, err = items.InsertOne(ctx, item)
	if err != nil {
		log.Println(err)
		fmt.Println(err)
	}

	return item, nil
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context) ([]*model.User, error) {
	usersCollection := r.DB.Database(pkgDB.ClientsDB).Collection(pkgDB.UserCol)

	usersCursor, err := usersCollection.Find(ctx, bson.D{})
	if err != nil {
		return nil, err
	}

	fmt.Println(usersCursor)

	return nil, nil
}

// Items is the resolver for the items field.
func (r *queryResolver) Items(ctx context.Context) ([]*model.Item, error) {
	itemsCollection := r.DB.Database(pkgDB.EquipDB).Collection(pkgDB.ItemsCol)
	itemsCursor, err := itemsCollection.Find(ctx, bson.M{})
	if err != nil {
		return nil, err
	}

	var results []*model.Item

	for itemsCursor.Next(ctx) {
		var (
			doc  bson.M
			item *model.Item
			err  error
		)

		itemsCursor.Decode(&doc)

		// Should be a better way to do this without needing to marshal to itemBytes and back
		itemBytes, err := bson.Marshal(doc)
		if err != nil {
			log.Println("Error Marshaling BSON to bytes: ", err)
		}

		detailsBytes, _ := bson.Marshal(doc["details"])

		err = bson.Unmarshal(itemBytes, &item)
		if err != nil {
			// Its fine if CategoryDetails can't be decoded
			fmt.Println(err)
		}
		fmt.Println(item.Category)
		details, err := model.MatchDetails(item.Category, detailsBytes)
		if err != nil {
			log.Println("Error Unmarshaling bytes", err)
		}

		item.Details = details

		results = append(results, item)

	}
	fmt.Println("Number of Items: ", len(results))
	return results, nil
}

// FindByModel is the resolver for the find_by_model field.
func (r *queryResolver) FindByModel(ctx context.Context, modelName string) (*model.Item, error) {
	itemsCollection := r.DB.Database(pkgDB.EquipDB).Collection(pkgDB.ItemsCol)
	itemResult := itemsCollection.FindOne(ctx, bson.M{"model": modelName})

	var (
		doc  bson.M
		item *model.Item
		err  error
	)

	itemResult.Decode(&doc)

	itemBytes, err := bson.Marshal(doc)
	if err != nil {
		log.Println("Error Marshaling BSON to bytes: ", err)
	}

	detailsBytes, err := bson.Marshal(doc["details"])
	if err != nil {
		log.Println("Error Marshal 'details' from mongo document: ", err)
	}

	err = bson.Unmarshal(itemBytes, &item)
	if err != nil {
		log.Println(err)
	}

	details, err := model.MatchDetails(item.Category, detailsBytes)
	if err != nil {
		log.Println("Error Unmarshaling bytes", err)
	}

	item.Details = details

	return item, nil
}

// FindByID is the resolver for the find_by_id field.
func (r *queryResolver) FindByID(ctx context.Context, id string) (*model.Item, error) {
	itemsCollection := r.DB.Database(pkgDB.EquipDB).Collection(pkgDB.ItemsCol)
	itemResult := itemsCollection.FindOne(ctx, bson.M{"ID": id})

	var (
		doc  bson.M
		item *model.Item
		err  error
	)

	itemResult.Decode(&doc)

	itemBytes, err := bson.Marshal(doc)
	if err != nil {
		log.Println("Error Marshaling BSON to bytes: ", err)
	}

	detailsBytes, err := bson.Marshal(doc["details"])
	if err != nil {
		log.Println("Error Marshal 'details' from mongo document: ", err)
	}

	err = bson.Unmarshal(itemBytes, &item)
	if err != nil {
		log.Println(err)
	}

	details, err := model.MatchDetails(item.Category, detailsBytes)
	if err != nil {
		log.Println("Error Unmarshaling bytes", err)
	}

	item.Details = details

	return item, nil
}

// FuzzyByModel is the resolver for the fuzzy_by_model field.
func (r *queryResolver) FuzzyByModel(ctx context.Context, modelName string) ([]*model.Item, error) {
	fuzzy := bson.D{
		{"$search", bson.D{
			{"index", "fuzzy_model"},
			{"text", bson.D{
				{"query", modelName},
				{"path", "model"},
				{
					"fuzzy", bson.D{},
				},
			}},
		}},
	}

	itemsCollection := r.DB.Database(pkgDB.EquipDB).Collection(pkgDB.ItemsCol)
	itemsCursor, err := itemsCollection.Aggregate(ctx, mongo.Pipeline{fuzzy})
	if err != nil {
		return nil, err
	}

	var results []*model.Item

	for itemsCursor.Next(ctx) {
		var (
			doc  bson.M
			item *model.Item
			err  error
		)

		itemsCursor.Decode(&doc)

		// Should be a better way to do this without needing to marshal to itemBytes and back
		itemBytes, err := bson.Marshal(doc)
		if err != nil {
			log.Println("Error Marshaling BSON to bytes: ", err)
		}

		detailsBytes, _ := bson.Marshal(doc["details"])

		err = bson.Unmarshal(itemBytes, &item)
		if err != nil {
			// Its fine if CategoryDetails can't be decoded
			fmt.Println(err)
		}

		details, err := model.MatchDetails(item.Category, detailsBytes)
		if err != nil {
			log.Println("Error Unmarshaling bytes", err)
		}

		item.Details = details

		results = append(results, item)

	}
	fmt.Println("Number of Items: ", len(results))
	return results, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type (
	mutationResolver struct{ *Resolver }
	queryResolver    struct{ *Resolver }
)
