"""
The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.
"""
directive @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT

directive @oneOf on INPUT_OBJECT

enum Analog {
  DC_12V
  DUAL_PIN_PHOENIX
  NL2
  NL4
  NL8
  TRI_PIN_PHOENIX
  TRRS
  TRS
  TS
  XLR_ANALOG
  XLR_DIGITAL
}

type AnalogConn {
  port_id: String!
  port_kind: Analog!
  port_usage: AnalogUsage!
  signal_lines: Int!
}

input AnalogConnInput {
  port_id: String!
  port_kind: Analog! = XLR_ANALOG
  port_usage: AnalogUsage! = INPUT
  signal_lines: Int! = 1
}

enum AnalogUsage {
  AUX
  INPUT
  INPUT_48V
  OUTPUT
}

enum Category {
  AMPLIFIER
  COMPUTER
  CONSOLE
  GENERIC
  MICROPHONES
  MONITORING
  NETWORK
  PROCESSOR
  RADIO
  SPEAKER
  SPK_HARDWARE
}

union CategoryDetails = Computer | Console

input CategoryDetailsInput {
  computer_input: ComputerInput
  console_input: ConsoleInput
}

type Computer {
  computer_ports: [ComputerConn]
  cpu_processor: String!
  dedicated_graphics: Boolean
  model_year: Int!
  network_connections: [NetworkConn]
  operating_system: String!
  power: Power!
  ram_size: Int!
  total_storage: Int!
}

type ComputerConn {
  front_port: Boolean!
  port_id: String
  port_kind: ComputerConnKind!
}

input ComputerConnInput {
  front_port: Boolean! = false
  port_id: String
  port_kind: ComputerConnKind!
}

enum ComputerConnKind {
  DISPLAYPORT
  FIREWIRE
  HDMI
  MINI_DISPLAYPORT
  MINI_HDMI
  MIRCO_B
  SD_CARD
  USB_A
  USB_B
  USB_C
  USB_C_THUNDERBOLT
}

input ComputerInput {
  computer_ports: [ComputerConnInput!]
  cpu_processor: String!
  dedicated_graphics: Boolean!
  model_year: Int!
  network_connections: [NetworkConnInput!]
  operating_system: String!
  power: PowerInput!
  ram_size: Int!
  total_storage: Int!
}

type Console {
  analog_connections: [AnalogConn!]
  can_expand: Boolean!
  faders: Int!
  max_sample_rate: SampleRate!
  midi: MidiType!
  motorized: Boolean!
  network_connections: [NetworkConn!]
  power: Power!
  protocol_inputs: Int!
  signal_protocol: Protocol!
}

input ConsoleInput {
  analog_connections: [AnalogConnInput!]
  can_expand: Boolean!
  faders: Int!
  max_sample_rate: SampleRate!
  midi: MidiType!
  motorized: Boolean!
  network_connections: [NetworkConnInput!]
  power: PowerInput
  protocol_inputs: Int!
  signal_protocol: Protocol!
}

enum DiaphagmSize {
  LARGE
  MED
  SMALL
}

type Dimension {
  height: Float!
  length: Float!
  width: Float!
}

input DimensionInput {
  height: Float!
  length: Float!
  width: Float!
}

type Error {
  field: String!
  message: String!
}

type Item {
  category: Category!
  cost: Float!
  created_at: String!
  details: CategoryDetails
  dimensions: Dimension
  id: ObjectID!
  manufacturer: String!
  model: String!
  notes: String
  pdf_blob: String
  updated_at: String!
  weight: Float!
}

input ItemInput {
  category: Category! = GENERIC
  cost: Float!
  created_at: String!
  dimensions: DimensionInput
  manufacturer: String!
  model: String!
  notes: String
  pdf_blob: String
  updated_at: String!
  weight: Float!
}

enum MicrophoneType {
  CONDENSOR
  DYNAMIC
  PRE_POLORAIZED_CONDENSOR
  RIBBON
}

enum MidiType {
  SERIAL
  USB
}

type Mutation {
  createItem(details: CategoryDetailsInput, input: ItemInput!): Item!
  createUser(input: UserInput!): User!
}

type NetworkConn {
  max_conn_speed: NetworkSpeed!
  port_id: String
  protocol: Protocol!
}

input NetworkConnInput {
  max_conn_speed: NetworkSpeed!
  port_id: String
  protocol: Protocol!
}

enum NetworkSpeed {
  GIGABIT
  SUPERSPEED
  TEN_GIGABIT
}

enum NetworkType {
  ACCESS_POINT
  INJECTOR
  MODEM
  NETWORK_BRIDGE
  NIC
  REPEATER
  ROUTER
  ROUTER_SW_AP
  SWITCH_MANAGED
  SWITCH_UNMANAGED
}

scalar ObjectID

enum PolarPattern {
  CARDIOID
  FIGURE_8
  HYPERCARDIOID
  OMNI
  SUPERCARDIOID
}

type Power {
  input_connector: PowerConnector!
  lower_voltage: Float
  max_wattage: Float!
  output_connector: PowerConnector
  redundant: Boolean
  upper_voltage: Float
  wattage: Float!
}

enum PowerConnector {
  EDISON
  EDISON_20A
  IEC
  L6_20
  L6_30
  L6_50
  L6_60
  POWERCON_20A
  POWERCON_32A
  POWERCON_TRUE1
  POWERCON_TRUE1_TOP
}

input PowerInput {
  input_connector: PowerConnector!
  lower_voltage: Float
  max_wattage: Float!
  output_connector: PowerConnector
  redundant: Boolean
  upper_voltage: Float
  wattage: Float!
}

enum Protocol {
  AES_67
  AVB
  AVB_MILAN
  A_NET
  DANTE
  IP
  OPTOCORE
  ULTRANET
}

type Query {
  find_by_id(id: ID!): Item!
  find_by_model(model_name: String!): Item!
  fuzzy_by_model(model_name: String!): [Item]!
  items: [Item!]!
  users: [User!]!
}

enum SampleRate {
  HD
  SD
  UHD
}

enum TransmitterConnector {
  MICRODOT
  SHURE_TA4
  TRI_PIN
  TRRS
}

type User {
  email: String!
  id: ID!
  name: String!
}

input UserInput {
  email: String!
  name: String!
}
